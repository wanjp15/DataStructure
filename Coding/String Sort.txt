#include<iostream>
#include<string>
#include<vector>
using namespace std;
class stringx
{
public:
    string s;
    int inputorder;
    stringx (string s0, int num0) :s (s0), inputorder (num0) {};
};
int char2int (string s,int d)   //s的第d位char转化为int，只要是无字符的位数，返回结果都是-1
{
    if (d < s.length ())      
    {
        return s[d] - 97;
    }
    else return -1;
}
void Swap (stringx &a, stringx &b)
{
    stringx c (a.s, a.inputorder);
    a.s = b.s;
    a.inputorder = b.inputorder;
    b.s = c.s;
    b.inputorder = c.inputorder;
}
int Partition (vector<stringx>& myvec, const int low, const int high)
{
    //数据表类的共有函数
    int pivotpos = low;
    stringx pivot = myvec[low];   //基准元素
    for (int i = low + 1; i <= high; i++)
        //检测整个序列, 进行划分
        if (myvec[i].s < pivot.s)
        {
            pivotpos++;
            if (pivotpos != i)  //同一元素则不必交换
                Swap (myvec[pivotpos], myvec[i]);
        }               //小于基准的交换到左侧去
    myvec[low] = myvec[pivotpos];
    myvec[pivotpos] = pivot;                                //将基准元素就位   
    return pivotpos;    //返回基准元素位置
};
void QuickSort (vector<stringx> &myvec, const int left, const int right)
{
    //对元素Vector[left], ..., Vector[right]进行排序, 
    //pivot=L.Vector[left]是基准元素, 排序结束后它的
    //位置在pivotPos, 把参加排序的序列分成两部分, 
    //左边元素的排序码都小于或等于它, 右边的都大于它
    if (left < right)
    {       //元素序列长度大于1时
        int pivotpos = Partition (myvec, left, right);    //划分  
        QuickSort (myvec, left, pivotpos - 1);
        QuickSort (myvec, pivotpos + 1, right);
    }
};
int Search (vector<stringx> &myvec, const int lowest, const int highest, string& s)
{
    int low = lowest, high = highest;
    while (low <= high)
    {
        int mid = (low + high) / 2;
        if (myvec[mid].s == s)
        {
            return mid+1;
        }
        else if (myvec[mid].s < s)
        {
            low = mid + 1;
        }
        else
        {
            high = mid - 1;
        }
    }
    return -1;
}
int strcomp (string &str1, string &str2, int len)
{
    int i = 0, j = 0;
    while (str1[i] && str2[j] && str1[i] == str2[j] && len != 0)
    {
        i++;
        j++;
        len--;
    }
    return str1[i] - str2[j];
}
int SearchPreFirst (vector<stringx> &myvec, const int lowest, const int highest, string& s)
{
    int low = lowest, high = highest, first;
    int temp;
    while (low <= high)
    {
        int mid = (low + high) / 2;
        temp = strcomp (myvec[mid].s, s, -1);
        if (temp < 0)
        {
            low = mid + 1;
        }
        else if (temp >= 0)
        {
            if (mid - 1 >= 0)
            {
                if (strcomp (myvec[mid - 1].s, s, -1) < 0)
                {
                    first = mid;
                    return first;
                }
                else
                    high = mid - 1;
            }
            else
            {
                first = mid;
                return first;
            }
        }
    }
    return -1;
}
int SearchPreLast (vector<stringx> &myvec, const int lowest, const int highest, string& s)
{
    int clen = s.length () - 1;
    int low = lowest, high = highest, last;
    while (low <= high)
    {
        int mid = (low + high) / 2;
        int temp = strcomp (myvec[mid].s, s, clen);
        if (temp == 0)
        {
            if (mid + 1 < myvec.size ())   //   
            {
                if (strcomp (myvec[mid + 1].s, s, clen) > 0)
                {
                    last = mid;
                    return last;
                }
                else
                    low = mid + 1;
            }
            else
            {
                last = mid;
                return last;
            }
        }
        else if (temp > 0)
        {
            high = mid - 1;
        }
    }
    return -1;
}
int main ()
{
    int n1, n2, n3, tp, flag = 0;
    vector<stringx> vec;
    //task 1
    cin >> n1;
    for (int i = 0; i < n1; i++)
    {
        string x;
        cin >> x;
        //flag += x.size ();
        stringx sx (x, i + 1);
        vec.push_back (sx);   //test ok；vec成功存入stringx对象
    }
    //快排已就绪
    QuickSort (vec, 0, vec.size ()-1);
    for (int i = 0; i < vec.size (); i++)
    {
        cout << vec[i].inputorder << " ";
    }
    cout << "\n";
    //task 2
    cin >> n2;
    for (int i = 0; i < n2; i++)
    {
        string x;
        cin >> x;
        cout << Search (vec, 0, vec.size () - 1, x) << " ";
    }
    cout << "\n";
    //task 3
    //if (flag > 100000)return 0;
    cin >> n3;
    for (int i = 0; i < n3; i++)
    {
        string x;
        cin >> x;
        tp = SearchPreFirst (vec, 0, vec.size () - 1, x);
        cout << SearchPreLast (vec, tp, vec.size () - 1, x) - tp + 1 << " ";
    }
}
